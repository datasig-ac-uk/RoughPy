#ifndef ROUGHPY_SCALARS_SCALAR_BLAS_DEFS
#define ROUGHPY_SCALARS_SCALAR_BLAS_DEFS


#cmakedefine RPY_USE_MKL

#ifdef RPY_USE_MKL
#  include <mkl.h>
#  include <mkl_spblas.h>
#else
#  include <cblas.h>
#  include <lapacke.h>
#endif

#include <roughpy/scalars/scalar_matrix.h>

#ifdef RPY_USE_MKL
#  define EIGEN_USE_MKL_ALL
#endif

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace
rpy {
namespace
blas {

#ifdef RPY_USE_MKL
using integer = MKL_INT;
using logical = MKL_INT;
using complex32 = MKL_Complex8;
using complex64 = MKL_Complex16;

#else
using integer = blasint;
using logical = blasint;
using complex32 = struct { float; float; };
using complex64 = struct { double; double; };

#define RPY_SIMATECOPY

#endif




using BlasLayout = CBLAS_LAYOUT;
using BlasTranspose = CBLAS_TRANSPOSE;
using BlasUpLo = CBLAS_UPLO;
using BlasDiag = CBLAS_DIAG;
using BlasSide = CBLAS_SIDE;

constexpr auto Blas_ColMajor = BlasLayout::CblasColMajor;
constexpr auto Blas_RowMajor = BlasLayout::CblasRowMajor;

constexpr auto Blas_NoTrans = BlasTranspose::CblasNoTrans;
constexpr auto Blas_Trans = BlasTranspose::CblasTrans;

constexpr auto Blas_Up = BlasUpLo::CblasUpper;
constexpr auto Blas_Lo = BlasUpLo::CblasLower;

constexpr auto Blas_DUnit = BlasDiag::CblasUnit;
constexpr auto Blas_DNoUnit = BlasDiag::CblasNonUnit;

constexpr auto Blas_Left = BlasSide::CblasLeft;
constexpr auto Blas_Right = BlasSide::CblasRight;

constexpr BlasLayout to_blas_layout(rpy::scalars::MatrixLayout layout) noexcept {
return layout == rpy::scalars::MatrixLayout::RowMajor ? Blas_RowMajor :
Blas_ColMajor;
}

}


namespace lapack {

using integer = lapack_int;


}
}


#endif // ROUGHPY_SCALARS_SCALAR_BLAS_DEFS
