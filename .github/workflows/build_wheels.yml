name: Build Wheels

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "examples/**"
      - "doc/**"
      - "README.md"
      - "*.txt"
      - "CHANGELOG"
  pull_request:
    branches: [ "main" ]
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - "examples/**"
      - "doc/**"
      - "README.md"
      - "*.txt"
      - "CHANGELOG"


env:
  BUILD_TYPE: Release
  VERBOSE: 1
#  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite;nuget,GitHub,readwrite'
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist .
        env:
          SETUPTOOLS_SCM_DEBUG: 1

      - name: Check sdist
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*

  build_wheels:
    name: Build wheel for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-2019
          - macos-11
        include:
          - os: windows-2019
            tag: "win_amd64"
          - os: ubuntu-20.04
            tag: "manylinux_x86_64"
          - os: macos-11
            tag: "macosx_x86_64"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup gha caching for vcpkg
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build and test
        uses: pypa/cibuildwheel@v2.13.0
        env:
          MACOSX_DEPLOYMENT_TARGET: 11.0.0
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel show {wheel} &&
            auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: > 
            delocate-wheel --require-archs {delocate_archs} --ignore-missing-dependencies -w {dest_dir} -v {wheel}
          GITHUB_TOK: "${{ secrets.GITHUB_TOKEN }}"
          CIBW_ENVIRONMENT_PASS_LINUX: GITHUB_TOK VCPKG_BINARY_SOURCES ACTIONS_CACHE_URL ACTIONS_RUNTIME_TOKEN

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl



  publish:
    runs-on: ubuntu-latest
    needs: [ build_wheels, build_sdist ]
    if: |
      github.event_name == 'push' || (
      github.event.pull_request.action == 'closed' &&
      ${{ github.event.pull_request.merged }} &&
      startsWith(github.head_ref, 'release/'))

    steps:
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install release deps
        run: python -m pip install twine

      - name: Retrieve sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: dist

      - name: Retrieve wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Create release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="$(ls dist | grep -Po '(?<=roughpy-).+(?=\.tar\.gz)')"
          gh release -R ${{ github.repository }} create -t $version --generate-notes $version dist/*

      - name: Publish
        run: |
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
