name: Build Wheels

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  BUILD_TYPE: Release
  VERBOSE: 1
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-2019
          - macos-12
        include:
          - os: windows-2019
            mono: ''
          - os: ubuntu-20.04
            mono: 'mono'
          - os: macos-12
            mono: 'mono'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure vcpkg caching
        shell: bash
        run: |
          ${{ matrix.mono }} `$VCPKG_INSTALLATION_ROOT/vcpkg fetch nuget | tail -n 1` \
            sources add \
            -source "https://nuget.pkg.github.com/datasig-ac-uk/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "datasig-ac-uk" \
            -password "${{ secrets.GITHUB_TOKEN }}"
          ${{ matrix.mono }} `$VCPKG_INSTALLATION_ROOT/vcpkg fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -source "https://nuget.pkg.github.com/datasig-ac-uk/index.json"
        if: runner.os != 'Linux'  # On Linux, the build is done in a docker container

      - name: Build and test
        uses: pypa/cibuildwheel@v2.13.0
        env:
          CIBW_BEFOREALL_MACOS: |
            brew install llvm libomp
          CIBW_ENVIRONMENT_MACOS: >
            LD_LIBRARY_PATH=/usr/local/lib:/usr/local/Cellar/:$LD_LIBRARY_PATH
            CMAKE_OMP_ROOT=/usr/local/Cellar/libomp/16.0.4/
          MACOSX_DEPLOYMENT_TARGET: 11.0.0
            

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist .

      - name: Check sdist
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*

  publish:
    runs-on: ubuntu-latest
    needs: [ build_wheels, build_sdist ]
    if: github.ref == 'refs/heads/release'

    steps:
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install release deps
        run: python -m pip install twine

      - name: Retrieve sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: dist

      - name: Retrieve wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish
        run: |
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
