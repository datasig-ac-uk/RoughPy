name: Build Wheels

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  BUILD_TYPE: Release
  VERBOSE: 1
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup git tag
        if: github.event.ref_type != 'tag'
        run: |
          tag=gh -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/datasig-ac-uk/roughpy/tags | jq '.[0].name'
          git tag -m "dummy-tag" -a $tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist .
        env:
          SETUPTOOLS_SCM_DEBUG: 1

      - name: Check sdist
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*

  build_wheels:
    name: Build wheel for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - windows-2019
          - macos-11
        include:
          - os: windows-2019
            mono: ''
            tag: "win_amd64"
          - os: ubuntu-20.04
            mono: 'mono'
            tag: "manylinux_x86_64"
          - os: macos-11
            mono: 'mono'
            tag: "macosx_x86_64"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true


      - name: Setup git tag
        if: github.event.ref_type != 'tag'
        run: |
          tag=gh -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/datasig-ac-uk/roughpy/tags | jq '.[0].name'
          git tag -m "dummy-tag" -a $tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      #      - name: Configure vcpkg caching
#        shell: bash
#        run: |
#          ${{ matrix.mono }} `$VCPKG_INSTALLATION_ROOT/vcpkg fetch nuget | tail -n 1` \
#            sources add \
#            -source "https://nuget.pkg.github.com/datasig-ac-uk/index.json" \
#            -storepasswordincleartext \
#            -name "GitHub" \
#            -username "datasig-ac-uk" \
#            -password "${{ secrets.GITHUB_TOKEN }}"
#          ${{ matrix.mono }} `$VCPKG_INSTALLATION_ROOT/vcpkg fetch nuget | tail -n 1` \
#            setapikey "${{ secrets.GITHUB_TOKEN }}" \
#            -source "https://nuget.pkg.github.com/datasig-ac-uk/index.json"
#        if: runner.os != 'Linux'  # On Linux, the build is done in a docker container

      - name: Build and test
        uses: pypa/cibuildwheel@v2.13.0
        env:
          CIBW_BUILD: cp310-${{ matrix.tag }}
          MACOSX_DEPLOYMENT_TARGET: 11.0.0
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel show {wheel} &&
            auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: > 
            delocate-wheel --require-archs {delocate_archs} --ignore-missing-dependencies -w {dest_dir} -v {wheel}
          GITHUB_TOK: "${{ secrets.GITHUB_TOKEN }}"
          CIBW_ENVIRONMENT_PASS_LINUX: GITHUB_TOK VCPKG_BINARY_SOURCES
            

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl



  publish:
    runs-on: ubuntu-latest
    needs: [ build_wheels, build_sdist ]
    if: github.ref == 'refs/heads/release'

    steps:
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install release deps
        run: python -m pip install twine

      - name: Retrieve sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: dist

      - name: Retrieve wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish
        run: |
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
